class KomposDemo usingPlatform: platform = Value (
| private actors    = platform actors.
  private processes = platform processes.

  private Array     = platform kernel Array.
  private ValueArray= platform kernel ValueArray.
  private Vector    = platform kernel Vector.
  private Exception = platform kernel Exception.

  private Channel   = processes Channel.
  private Process   = processes Process.

  private Task      = platform threading Task.
|)(
  private class JsonParseError signalFor: str at: idx = Exception <: Value (
  | public string = str.
    public index  = idx.
  |
    signal
  )(
    public message = (
      ^ 'JSON parse error. Unexpected character at ' + index + ' in "' + string + '".'.
    )
  )

  private class JsonToken new: val with: type = Value (
  | public value = val.
    public type  = type.
  |)()

  (* Tokenizes a stream of incomming strings into JSON tokens.
     The tokens are passed on to the reader of `tokensOut`.

     The incomming stream `stringIn` is expected to be terminated with `nil`.
     After a complete string is tokenized, it will put a `nil` on `tokensOut`,
     too indicate the end of the token sequence. *)
  private class JsonStreamTokenizer new: stringIn and: tokensOut = Process (
  | private stringIn = stringIn.
    private tokensOut = tokensOut.

    private index         ::= 0.
    private captureBuffer ::= ''.
    private captureStart  ::= 0.
    private current       ::= nil.
    private str           ::= nil.
  |)(
    private error = (
      JsonParseError signalFor: str at: index
    )

    private startCapture = (
      captureStart:: index - 1
    )

    private pauseCapture = (
      captureBuffer:: captureBuffer concatenate: (
        input substringFrom: captureStart to: index - 2).
      captureStart:: -1
    )

    private endCapture = (
      | captured |
      '' = captureBuffer
        ifTrue:  [ captured:: str substringFrom: captureStart to: index - 2 ]
        ifFalse: [
          pauseCapture.
          captured:: captureBuffer.
          captureBuffer:: '' ].
      captureStart:: -1.

      ^ captured
    )

    private readDigit = (
      isDigit ifFalse: [ ^ false ].
      read.
      ^ true
    )

    private readNumber = (
      | firstDigit |
      startCapture.
      current = '-' ifTrue: [ read ].
      firstDigit:: current.

      readDigit ifFalse: [ error ].
      firstDigit <> '0' ifTrue: [ [ readDigit ] whileTrue: []].

      readFraction.
      tokensOut write: (JsonToken new: endCapture asInteger with: #number)
    )

    readFraction = (
      (current = '.') ifTrue: [ read ] ifFalse: [ ^ false ].

      readDigit ifFalse: [ error ].

      [ readDigit ] whileTrue: [].

      ^ true
    )

    private readString = (
      | string |
      read.
      startCapture.

      [current = '"'] whileFalse: [
        current = '\\' ifTrue: [
          pauseCapture.
          readEscape.
          startCapture.
        ] ifFalse: [
          (* TODO: if (current < 0x20) { throw expected('valid string character'); }*)
          read.
        ]
      ].
      string:: endCapture.
      tokensOut write: (JsonToken new: string with: #string).
    )

    private readNull = (
      read = 'u' ifFalse: [ ^ error ].
      read = 'l' ifFalse: [ ^ error ].
      read = 'l' ifFalse: [ ^ error ].
      ^ tokensOut write: (JsonToken new: nil with: #null)
    )

    private readFalse = (
      read = 'a' ifFalse: [ ^ error ].
      read = 'l' ifFalse: [ ^ error ].
      read = 's' ifFalse: [ ^ error ].
      read = 'e' ifFalse: [ ^ error ].
      ^ tokensOut write: (JsonToken new: false with: #false)
    )

    private readTrue = (
      read = 'r' ifFalse: [ ^ error ].
      read = 'u' ifFalse: [ ^ error ].
      read = 'e' ifFalse: [ ^ error ].
      ^ tokensOut write: (JsonToken new: true with: #true)
    )

    private isWhiteSpace = (
      current = ' '  ifTrue: [ ^ true ].
      current = '\t' ifTrue: [ ^ true ].
      current = '\n' ifTrue: [ ^ true ].
      current = '\r' ifTrue: [ ^ true ].
      ^ false
    )

    private isDigit = (
      current = '0' ifTrue: [ ^ true ].
      current = '1' ifTrue: [ ^ true ].
      current = '2' ifTrue: [ ^ true ].
      current = '3' ifTrue: [ ^ true ].
      current = '4' ifTrue: [ ^ true ].
      current = '5' ifTrue: [ ^ true ].
      current = '6' ifTrue: [ ^ true ].
      current = '7' ifTrue: [ ^ true ].
      current = '8' ifTrue: [ ^ true ].
      current = '9' ifTrue: [ ^ true ].
      ^ false
    )

    private readToken = (
      current = '{' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #leftBrace)    ].
      current = '}' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #rightBrace)   ].
      current = '[' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #leftBracket)  ].
      current = ']' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #rightBracket) ].
      current = ':' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #colon) ].
      current = ',' ifTrue: [ ^ tokensOut write: (JsonToken new: current with: #comma) ].
      current = '"' ifTrue: [ ^ readString ].
      current = 't' ifTrue: [ ^ readTrue ].
      current = 'f' ifTrue: [ ^ readFalse ].
      current = 'n' ifTrue: [ ^ readNull ].
      isDigit ifTrue: [ ^ readNumber ].
      isWhiteSpace ifFalse: [
        error ].
    )

    (* read next character *)
    private read = (
      current:: str charAt: index.
      index::   index + 1.
      ^ current
    )

    private tokenize: str = (
      index:: 1.

      [ index <= str length ] whileTrue: [
        read.
        readToken ].

      tokensOut write: nil. (* signal end of chunk *)
    )

    public run = (
      [ str:: stringIn read. str = nil ] whileFalse: [
        tokenize: str ].
      tokensOut write: #end. (* signal end of stream *)
    )
  )

  private class RelevantData price: price quantity: quantity = Value (
  | public price    = price.
    public quantity = quantity.
  |)(
    public total = ( ^ price * quantity )
  )

  private class DataFilterProcess new: tokensIn data: dataOut = Process (
  | private tokensIn = tokensIn.
    private dataOut  = dataOut.

    private priceNext    ::= false.
    private quantityNext ::= false.
    private price        ::= -1.
    private quantity     ::= -1.
  |)(
    private process: token = (
      token type = #string ifTrue: [
        token value = 'price' ifTrue: [ priceNext:: true ].
        token value = 'quantity' ifTrue: [ quantityNext:: true ] ].
      token type = #number ifTrue: [
        priceNext ifTrue: [ price:: token value. priceNext:: false ].
        quantityNext ifTrue: [ quantity:: token value. quantityNext:: false ] ].
    )

    public run = (
      | token |
      [ token:: tokensIn read. #end <> token ] whileTrue: [
        token isNil
          ifTrue:  [
             dataOut write: (RelevantData price: price quantity: quantity) ]
          ifFalse: [ process: token ] ]
    )
  )

(* Can't use a separate DataStoreProcess at the moment. Need to go back to our
   original actor instead, because otherwise, we can't send messages.
   (because we need an actor thread to send message)

  private class DataStoreProcess new: dataIn store: dataActor = Process (
  | private dataIn    = dataIn.
    private dataActor = dataActor.
  |)(
    public run = (
      | datum |
      [ datum:: dataIn read. datum notNil println. datum notNil ] whileTrue: [
        'loop' println. 1 halt.
        dataActor <-: data: datum. 'done '  println.]
    )
  ) *)

  class BlackHoleOut = Value ()(
    public write: v = ( v total println. )
  )

  (* Actor to hide the CSP-based implementation from the rest of the system. *)
  class JsonInputActor new: dataActor = (
  | private dataActor = dataActor.
    private stringOut ::= nil.
    private dataIn ::= nil.
  |)(
    (* Initializes the subsystem *)
    public start = (
      | toTokenizer toObjectCtor toDataStore |
      toTokenizer::  Channel new.
      toObjectCtor:: Channel new.
      toDataStore::  Channel new.
      stringOut:: toTokenizer out.
      dataIn::    toDataStore in.

      processes spawn: JsonStreamTokenizer with: { toTokenizer in. toObjectCtor out }.
      processes spawn: DataFilterProcess   with: { toObjectCtor in. toDataStore out }.
    )

    public stream: str = (
      ('[JsonInputActor] Rcvd: ' + str) println.

      (* Careful, this is blocking. We don't have proper language integration yet.
         TODO: revise in nice language, future work.
       *)
      stringOut write: str.
      (* this is blocking, too. *)
      dataActor <-: data: dataIn read.
    )
  )

  (* Actor generating input for the whole system *)
  class InputGeneratorActor new: jsonInput = (
  | private jsonInput = jsonInput.
  |)(
    private jsonStreamInput = (
      ^ { '{"price":10,"quantity": 87,"customer": "Medesign","address":"993 Kensington Walk, Cassel, Tennessee, 8882","item": "strawberry"}'.
          '{"price": 5,"quantity": 83,"customer": "Gadtron","address": "652 Coffey Street, Oasis, Rhode Island, 8428","item": "apple"}'.
          '{"price": 5,"quantity": 20,"customer": "Rooforia","address": "117 Holmes Lane, Innsbrook, Connecticut, 4261","item": "banana"}'.
          '{"price": 4,"quantity": 18,"customer": "Sureplex","address": "586 Beacon Court, Durham, Louisiana, 1428","item": "apple"}'.
          '{"price": 2,"quantity": 39,"customer": "Spherix","address": "489 Beaver Street, Elbert, Florida, 3946","item": "strawberry"}'.
          '{"price": 8,"quantity": 33,"customer": "Podunk","address": "126 Concord Street, Westwood, Kansas, 2573","item": "banana"}'.
          '{"price": 1,"quantity": 31,"customer": "Malathion","address": "202 Newport Street, Boyd, Oklahoma, 4821","item": "strawberry"}'.
          '{"price": 3,"quantity": 48,"customer": "Illumity","address": "996 George Street, Bennett, Illinois, 1760","item": "strawberry"}'.
          '{"price": 2,"quantity": 33,"customer": "Accupharm","address": "654 Court Square, Kohatk, Indiana, 5110","item": "apple"}'.
          '{"price": 8,"quantity": 78,"customer": "Terascape","address": "767 Thatford Avenue, Sunbury, Delaware, 4729","item": "strawberry"}' }
    )

    public start = (
      jsonStreamInput do: [:str |
        jsonInput <-: stream: str. ].
      jsonInput <-: stream: nil. (* signal end of stream *)
    )
  )

  class DataActor new: reportActor = (
  | private data        = Vector new: 10.
    private reportActor = reportActor.
  |)(
    public data: aRelevantDatum = (
      ('[DataActor     ] Rcvd datum. Total Value: ' +  aRelevantDatum total asString) println.

      data append: aRelevantDatum.

      (data size % 10) = 0
        ifTrue: [ sendReport ]
    )

    (* Select data for report and send it to `reportActor`. *)
    private sendReport = (
      | valArr |
      valArr:: ValueArray new: data size
                       withAll: [:i | (data at: i) total ].

      reportActor <-: report: valArr
    )
  )

  class ReportActor new: resolver = (
  | private resolver = resolver. |
  )(
    private class TempTreeNode left: left right: right sum: sum low: low high: high = (
    | public left  = left.
      public right = right.
      public sum  = sum.
      public low  = low.
      public high = high.
    |)(
      public isLeaf = ( ^ left isNil and: [ right isNil ] )
    )

    private calculatePrefixSum: arr = (
      | prefixSum |
      prefixSum:: Array new: arr size.
      arr doIndexes: [:i |
        | prev |
        i = 1 ifTrue: [ prev:: 0 ] ifFalse: [ prev:: prefixSum at: i - 1 ].
        prefixSum at: i put: (arr at: i) + prev ].
      ^ prefixSum
    )

    private buildParallelSumTree: data from: low to: high = (
      | left leftTask right |
      high - low < 2 ifTrue: [ ^ TempTreeNode left: nil right: nil sum: (data at: low) low: low high: high ].

      leftTask:: Task
        spawn: [:l :h |
                  buildParallelSumTree: data from: l to: h ]
         with: { low. (high + low) / 2) }.

      right:: buildParallelSumTree: data from: (high + low) / 2 to: high.

      left:: leftTask join.

      ^  TempTreeNode left: left right: right sum: left sum + right sum low: low high: high
    )

    private calculateSumOf: tempNode with: leftSum from: input into: result = (
      tempNode isLeaf
        ifTrue: [
          result at: tempNode low put: (input at: tempNode low) + leftSum ]
        ifFalse: [
          | leftTask |
          leftTask:: Task spawn: [ calculateSumOf: tempNode left with: leftSum from: input into: result ].
          calculateSumOf: tempNode right with: leftSum + tempNode left sum from: input into: result.
          leftTask join.
        ]
    )

    private calculateParallelPrefixSum: arr = (
      | tempTree result |
      result:: Array new: arr size.
      tempTree:: buildParallelSumTree: arr from: 1 to: arr size + 1.
      calculateSumOf: tempTree with: 0 from: arr into: result.
      ^ result
    )

    public report: arr = (
      | prefixSumCheck prefixSum |
      '\n\n\n[ReportActor] report' println.

      prefixSumCheck:: calculatePrefixSum: arr.
      prefixSum::      calculateParallelPrefixSum: arr.

      prefixSum doIndexes: [:i |
        (* (prefixSum at: i) print. ' ' print.
        (prefixSum2 at: i) println. *)
        (prefixSum at: i) = (prefixSumCheck at: i) ifFalse: [ error: 'Prefix Sum incorrect '] ].

      '____ ____ _    ____ ____    ____ _  _ ____ ____    ___ _ _  _ ____
[__  |__| |    |___ [__     |  | |  | |___ |__/     |  | |\\/| |___
___] |  | |___ |___ ___]    |__|  \\/  |___ |  \\     |  | |  | |___' println.

      printChart: prefixSum.

      (* End Demo *)
      resolver resolve: 0.
    )

    private printChart: data = (
      | chart |
      chart:: Array new: data size.

      data doIndexes: [:i |
        | bar |
        bar:: Array new: 10 withAll: ' '.
        1 to: (data at: i) / 300 do: [:j |
          bar at: j put: '#' ].
        chart at: i put: bar
      ].

      10 downTo: 1 do: [:i |
        chart do: [:bar |
          '  ' print.
          (bar at: i) print.
          (bar at: i) print.
          '  ' print  ].
        '' println ].
      '' println.

      '  ' print.
      data do: [:v | v print. '  ' print ].
    )
  )

  public main: args = (
    | completionPP generator json data report |

' _   __                                 ______
| | / /                                 |  _  \\
| |/ /  ___  _ __ ___  _ __   ___  ___  | | | |___ _ __ ___   ___
|    \\ / _ \\| \'_ ` _ \\| \'_ \\ / _ \\/ __| | | | / _ \\ \'_ ` _ \\ / _ \\
| |\\  \\ (_) | | | | | | |_) | (_) \\__ \\ | |/ /  __/ | | | | | (_) |
\\_| \\_/\\___/|_| |_| |_| .__/ \\___/|___/ |___/ \\___|_| |_| |_|\\___/
                      | |
                      |_|

' println.

    '[DEMO] Starting' println.
    '' println.
    '[Create Actor] DataActor' println.
    '[Create Actor] JsonInputActor' println.
    '[Create Actor] InputGeneratorActor' println.
    '[Create Actor] ReportActor' println.
    '' println.

    completionPP:: actors createPromisePair.
    report:: (actors createActorFromValue: ReportActor) <-: new: completionPP resolver.
    data::   (actors createActorFromValue: DataActor) <-: new: report.
    json::   (actors createActorFromValue: JsonInputActor) <-: new: data.
    json <-: start.

    generator:: (actors createActorFromValue: InputGeneratorActor) <-: new: json.
    generator <-: start.
    ^ completionPP promise whenResolved: [:r |
        '\n\nEND DEMO' println.
        r ].
  )
)
